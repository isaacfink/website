Throughout my career, I've had the opportunity to collaborate with teams of various sizes across multiple organizations. My first job was at a local payment processing company, which, at the time, was coordinating with an offshore team to meet some pressing deadlines. The urgency was due to some of our vendors updating their APIs and their encryption protocols, and the company needed someone on-site to address this swiftly.

The primary technology stack at this company was PHP/Laravel, with which I had no prior experience (a fact the company was aware of). Despite this, I quickly familiarized myself with both the technologies and the existing codebase, contributing meaningfully within my first week.

My next job was working for a startup called [Triple whale](https://www.triplewhale.com/) the focus was to build a financial analytics platform, I was put on the team in the very early stages of the product and I was involved in some early decisions

Triple whale taught me a lot about teamwork and communication, I was working remotely which presented additional challenges that I had to overcome, I found pair programming to be an effective way of staying on the same page with other teammates.

<!-- A standout moment during my time at Triple Whale involved tackling the categorization of transactionsâ€”a component the project manager identified as particularly challenging due to several unique obstacles:

- The data was coming in from multiple sources which required some extra steps to normalize everything.
- Merchant names were inconsistent, with some in foreign languages.
- The provided categories, when available, did not match our intended framework.

As the newest member of the team, I volunteered to spearhead this challenge. My solution incorporated setting sensible defaults (with options for admin adjustments) and soliciting user input for unclassifiable transactions. Although effective, this approach initially placed a heavy load on the browser due to real-time category regeneration with each user modification. To address this, I reevaluated our strategy and transitioned most of the categorization logic to Postgres. This adjustment significantly improved performance by enabling caching at the API level, thereby optimizing the user experience. -->
